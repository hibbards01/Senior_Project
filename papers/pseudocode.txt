-------------------------------------------------------------------------------
|                          Pseudocode for Functions                           |
-------------------------------------------------------------------------------
Copyright 2001 The University of Texas at Austin

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-------------------------------------------------------------------------------
-------------------------------- Driver Program -------------------------------
-------------------------------------------------------------------------------

main
    SET sim to Simulator
    SET supervisor to Supervisor

    WHILE supervisor.getNoImprovement() > 10 OR supervisor.getGeneration() < 1500 # Increase this number?
        runSolutions(supervisor, sim)
        supervisor.epoch()
    END
END

runSolutions( supervisor, sim )
    FOR species in supervisor.getSpecies()
        FOR genome in species.getGenomes()
            SET score to runSim(sim, genome.getNetwork)

            genome.setScore(score)

            sim.restart()
        END
    END
END

/**
 * NOTES:
 *  This will run the simulation for one node. After it is done it will
 *      grab the score from the simulation.
 */
runSim( sim, network )
    SET controller
    WHILE sim.run(controller) != 0
        SET inputs to sim.getInputs()

        SET controller to network.feedForward(inputs)
    END

    RETURN sim.getScore()
END

/**
 * NOTES:
 *  This will grab what the inputs are for the ship.
 */
getInputs()
    SET ship to objects[0].getPoint()
    SET sensors to VECTOR # 2 dimensional array

    FOR 1 till objects.size() with i as KEY
        IF objects[i].getType is ASTEROID
            SET x to (objects[i].getPoint().getX() - ship.getX()) / 20
            SET y to (objects[i].getPoint().getY() - ship.getY()) / 20

            IF x < 6 AND y < 6
                SET sensors[x][y] to objects[i].getValue()
            END
        ELSE
            SET rockPoints to objects[i].getRockPoints()
            FOR 0 till rockPoints.getSize() with p as KEY
                SET x to (rockPoints[p][0] - ship.getX()) / 20
                SET y to (rockPoints[p][1] - ship.getY()) / 20

                IF x < 6 AND y < 6
                    SET sensors[x][y] to objects[i].getValue()
                END
            END
        END
    END

    RETURN sensors
END

-------------------------------------------------------------------------------
-------------------------------- Class Supervisor -----------------------------
-------------------------------------------------------------------------------

/**
 * NOTES:
 *  When initializing the population first create all the output nodes then
 *      do all the sensor nodes afterwards.
 *
 *  GA03 requirement fulfilled
 */
CONSTRUCTOR()
    SET species to Species(100, 3, 5) # Define these?
    INSERT species in species # Confusing right? ;)
END

/**
 * NOTES:
 *  This will write the whole population to a file. It will loop through
 *      each of the Species and have them write to a file.
 *
 *  GA05 requirement fulfilled
 *  NN02 requirement fulfilled
 */
writePopulationToFile()
    FOR s in species with id as KEY
        s.writeGenomesToFile(generation, id)
    END
END

/**
 * NOTES:
 *  This will determine how many babies that are needed to be made for
 *      the next generation.
 */
epoch()
    FOR s in species
        s.adjustedFitness()
    END

    SET average to setOverallAverage()

    sort(species) # Sort the species by best average fitness descending order

    SET totalOffspring to 0
    FOR s in species
        IF s.getnoImprovement > threshold # When should the species die
                                           if they don't improve?
            totalOffspring += s.size()
            ERASE s in species
        ELSE
            SET babies to s.getAverageFitness() / average

            s.killGenomes()

            totalOffspring += s.getSize() + babies

            s.produceOffspring(babies)
        END
    END

    SET remainingBabies to (100 - totalOffspring) # Pound define 100?

    IF remainingBabies > 0
        SET j to 0
        FOR 0 till remainingBabies as i
            IF j == species.size()
                species[i].produceOffspring(1) # This produces the remaining offspring
                                               # with the better species.
            ELSE
                SET j to 0
            END

            j++
        END
    END

    update() # Update everything
END

setOverallAverage()
    SET total to 0
    FOR s in species
        total += s.getAverageFitness()
    END

    SET average to total / species.size()

    IF overallAverage < average
        SET overallAverage to average
    ELSE
        ++noImprovement
    END
END

update()
    FOR s in species
        s.update()
    END

    ++generation

    IF generation % 5
        writePopulationToFile()
    END
END

-------------------------------------------------------------------------------
-------------------------------- Class GeneHistory ----------------------------
-------------------------------------------------------------------------------

/**
 * NOTES:
 *  This class acts like a singleton class. Any class can use it if needed.
 */

/**
 * NOTES:
 *  This will add a new gene to the history if it is not there already.
 *      If it is then it will not add to the history.
 */
addNewNeuron(id, type)
    SET found to FALSE
    FOR innovation in innovations
        IF innovation.nodeType is not NONE AND innovation.node is id
            SET found to TRUE
        END
    END

    IF not found
        SET innovation to Innovation(NULL, NULL, id, type)
        INSERT innovation in innovations
    END
END

/**
 * NOTES:
 *  This will add a new link if it doesn't exist. If it does then it will
 *      return that existing innovation id. Otherwise it will return the
 *      newly created innovation id.
 */
addNewLink(source, destination)
    SET found to NULL
    FOR innovation in innovations AND found is NULL
        IF innovation.nodeType is NONE AND innovation.input == source AND innovation.output == destination
            SET found to innovation.id
        END
    END

    IF found is NULL
        SET innovation to Innovation(source, destination, NULL, NONE)
        SET found to innovation.id
        INSERT innovation in innovations
    END

    RETURN found
END


-------------------------------------------------------------------------------
-------------------------------- Class Species --------------------------------
-------------------------------------------------------------------------------

/**
 * NOTES:
 *  GA03 requirement fulfilled
 */
CONSTRUCTOR(population, outputs, inputs)
    FOR 0 till population
        SET genome to Genome(outputs, inputs)
        INSERT genome in genomes
    END
END

update()
    FOR genome in genomes
        genome.update()
    END

    ++age
END

getAverageFitness()
    SET total to 0
    FOR genome in genomes
        SET total += genome.getFitness()
    END

    SET average to total / genomes.size()

    IF averageFitness < average
        SET averageFitness to average
        SET noImprovement to 0
    ELSE
        noImprovement++
    END

    RETURN average
END

/**
 * NOTES:
 *  Who has survived this round? This one will loop through everyone to see
 *      who survived this round. Everyone else will be eliminated.
 */
killGenomes()
    # Can make the 0.2 a pound define.
    SET numOfSurvivors to floor(genomes.size() * 0.2) + 1.0

    sort(genomes) # Sort the genomes by adjustedFitness in descending order

    genomes.erase(numOfSurvivors, genomes.size() - 1)
END

/**
 * NOTES:
 *  GA05 requirement fulfilled
 *  NN02 requirement fulfilled
 */
writeGenomesToFile(generation, id)
    OPEN file to "gen" + generation + "species" + id + ".txt"

    IF failed to open file
        PUT error
    ELSE
        FOR genome in genomes with id as KEY
            PUT "Genome " + id + "\n----------"
            PUT "Nodes:\n" + genome.getNodesString()
            PUT "Links:\n" + genome.getLinksString()

            genome.getNetwork().writeNetworkToFile(id)
        END
    END
END

/**
 * NOTES:
 *  This will adjust the fitness so that younger genomes have a better
 *      chance in surviving in the population.
 */
adjustFitness()
    SET size to genomes.size()
    FOR genome in genomes
        # Adjust the fitness more for younger genomes?
        genome.setAdjustedFitness(genome.getFitness() / size)
    END
END


/**
 * NOTES:
 *  This will produce offspring with crossover. But it has to pass
 *      the crossover rate. If it doesn't then it will give a random
 *      genome in the species.
 *
 *  GA01 requirement fulfilled.
 */
produceOffspring( num )
    SET offspring to VECTOR
    FOR 0 till num
        SET child to NULL
        SET parent1 to random genome in genomes

        IF random(0,10) <= 7 # Bound define for the 7?
            SET randNum to random(0, genomes.size() - 2)

            IF randNum is same index for parent1
                SET randNum to genomes.size() - 1
            END

            SET parent2 to genomes[randNum]

            SET child to parent1.produceChild(parent2)
        ELSE
            SET child to parent1
        END

        mutate(child)

        INSERT child in offspring
    END

    FOR o in offspring
        INSERT o in genomes
    END
END

/**
 * NOTES:
 *  This will mutate the child. It will randomly do any of the
 *      the functions that are called here.
 *
 *  GA02 requirement fulfilled.
 */
mutate( child )
    IF random(0.01, 1.0) < 0.07 # Pound define this?
        SET num to random(0, 2)
        SET done to FALSE

        IF num is 0
            SET done to child.mutateEnableLink()
        END

        IF not done
            SET num to random(1, 2)
            ELSE IF num is 1
                child.mutateRemoveLink()
            ELSE
                child.mutateAddLink()
            END
        END
    END

    IF random(0.01, 1.0) < 0.03 # Pound define this?
        child.mutateAddNode()
    END

    IF random(0.01, 1.0) < 0.2 # Pound define this?
        child.mutateWeight()
    END
END

-------------------------------------------------------------------------------
-------------------------------- Class Genome ---------------------------------
-------------------------------------------------------------------------------

/**
 * NOTES:
 *  GA03 requirement fulfilled
 */
CONSTRUCTOR(outputs, inputs)
    SET id to 0
    FOR 0 till outputs as i
        INSERT NodeGene(id, OUTPUT) in nodeGenes
        geneHistory.addNewGene(id, OUTPUT)

        ++id
    END

    FOR 0 till inputs
        INSERT NodeGene(id, INPUT) in nodeGenes
        geneHistory.addNewGene(id, INPUT)

        FOR 0 till outputs as i
            SET source to id
            SET destination to nodeGenes[i].id
            SET linkId to geneHistory.addNewLink(source, destination)

            INSERT linkGene(linkId, source, destination, random(0.0, 1.0)) in linkGenes # Give a random weight
        END

        ++id
    END
END

update()
    network.update(nodeGenes, linkGenes)

    ++age
END

/**
 * NOTES:
 *  To do speciation you have to compute the distance it is from one genome from
 *      any other random genome.
 *  This is the formula that is given for computing it:
 *      d = ((c1 * E) / N) + ((c2 * D) / N) + (c3 * W)
 *  Variables:
 *      - d,  This is the final distance computed.
 *      - E,  This is the number of Excess of the Genes.
 *      - D,  This is the number of disjoint of the Genes.
 *      - N,  Genome size. Can be set to 1 if small. Or set to the longest genome.
 *      - W,  This is where you minus both the weights and add them up to the total.
 *            which is then divided by the total number of innovations that were the
 *            same between both of the genomes.
 *      - c1, c2, c3, These adjust the importance of the three. These will be static
 *                    variables set at the beginning of the program.
 */
computeDistance( rhs )
    SET lhsIterator to linkGenes
    SET rhsIterator to rhs.linkGenes
    SET disjoints to 0
    SET excess to 0
    SET matched to 0
    SET weightDifference to 0

    WHILE lhsIterator != linkGenes.end() || rhsIterator != rhs.linkGenes.end()

        IF rhsIterator == rhs.linkGenes.end()
            ++excess
            ++lhsIterator
        ELSE IF lhsIterator == linkGenes.end()
            ++excess
            ++rhsIterator
        ELSE IF lhsIterator.id < rhsIterator.id
            ++disjoints
            ++lhsIterator
        ELSE IF rhsIterator.id < lhsIterator.id
            ++disjoints
            ++rhsIterator
        ELSE
            weightDifference += ABS(lhsIterator.weight - rhsIterator.weight)

            ++matched
            ++lhsIterator
            ++rhsIterator
        END
    END

    SET size to IF linkGenes.size() >= rhs.linkGenes.size() THEN linkGenes.size() ELSE rhs.linkGenes.size()

    SET distance to ((c1 * excess) / size) + ((c2 * disjoints) / size) + (c3 * (weightDifferenec / matched))

    RETURN distance
END

/**
 * NOTES:
 *  RHS variable is a Genome that will do the crossover with THIS.
 *
 *  GA01 requirement fulfilled
 */
produceChild( rhs )
    SET lhsIterator to linkGenes
    SET rhsIterator to rhs.linkGenes
    SET childLinkGenes to VECTOR
    SET fit to IF rhs.fitness < fitness THEN TRUE ELSE FALSE # Who is the more fit parent?

    WHILE lhsIterator != linkGenes.end() || rhsIterator != rhs.linkGenes.end()
        SET newLinkGene to NULL

        IF rhsIterator == rhs.linkGenes.end() || lhsIterator.id < rhsIterator.id
            SET newLinkGene to lhsIterator

            ++lhsIterator
        ELSE IF lhsIterator == linkGenes.end() || rhsIterator.id < lhsIterator.id
            SET newLinkGene to rhsIterator

            ++rhsIterator
        ELSE
            SET newLinkGene to IF fit THEN lhsIterator ELSE rhsIterator

            ++lhsIterator
            ++rhsIterator
        END

        INSERT newLinkGene in childLinkGenes
    END

    SET childNodeGenes to NULL
    SET otherNodeGenes to NULL

    IF fit
        childNodeGenes to nodeGenes
        otherNodeGenes to rhs.nodeGenes
    ELSE
        otherNodeGenes to nodeGenes
        childNodeGenes to rhs.nodeGenes
    END

    FOR childNodeGenes.size() till otherNodeGenes.size() with i
        INSERT otherNodeGenes[i] in childNodeGenes
    END

    RETURN Genome(childNodeGenes, childLinkGenes)
END

/**
 * NOTES:
 *  This will give back a string of the connection genes in the Genome. This
 *      allows the Supervisor to write to a file.
 *
 *  GA05 requirement fulfilled
 */
getLinksString()
    SET ids
    SET inputs
    SET outputs
    SET weights
    SET enables

    FOR link in linkGenes
        ids += "Id: " + link.id + " "
        inputs += "Input: " + link.input + " "
        outputs += "Output: " + link.output + " "
        weights += "Weight: " + link.weight + " "
        enables += "Enabled: " + link.enables + " "
    END

    RETURN ids + "\n" + inputs + "\n" + outputs + "\n" + weights + "\n" + enables + "\n"
END

/**
 * NOTES:
 *  GA05 requirement fulfilled
 */
getNodesString()
    SET ids
    SET types
    SET numRecurrent

    FOR node in nodeGenes
        ids += "Id: " + node.id + " "
        types += "Type: " + node.type + " "
        numRecurrent += "Recurrent: " + node.recurrent + " "
    END

    RETURN ids + "\n" + types + "\n" + numRecurrent + "\n"
END

/**
 * NOTES:
 *  1. Select two random neurons
 *      a. Bias can never be a destination
 *      b. Output neurons cannot be a source
 *  2. One neuron will be the source the other a destination
 *  3. Link the two with a small random weight
 *
 *  GA02 requirement fulfilled
 */
mutateAddLink()
    SET source to NULL
    SET destination to NULL
    SET found to FALSE
    SET num to random(0, 2)
    SET recurrent to FALSE
    IF num == 0 # Create a recurrent link on itself
        FOR node in nodeGenes
            IF node is not SENSOR AND node is not OUTPUT AND node is not BIAS AND node is not recurrent
                SET source to node
                SET destination to node
                SET found to TRUE
                SET recurrent to TRUE
            END
        END
    ELSE
        SET numTimes to 10 # How many times should we keep on looping to find something?

        WHILE not found AND numTimes--
            SET num to random(0, nodeGenes.size())
            SET source to nodeGenes[node]
            SET num to random(0, nodeGenes.size())
            SET destination to nodeGenes[node]

            IF source.type is not OUTPUT AND destination.type is not BIAS AND source.id != destination.id
                SET found to TRUE
            END
        END
    END

    IF found
        SET weight to random(0, 1)
        SET id to geneHistory.addNewLink(source.id, destination.id)

        SET sourcePath to network.getShortestPath(source.id)
        SET destPath to network.getShortestPath(destination.id)

        IF destinationPath <= sourcePath
            SET recurrent to TRUE
        END

        SET destination.recurrent to recurrent

        SET link to LinkGene(id, source.id, destination.id, weight, true)
        INSERT link to linkGenes
    END
END

/**
 * NOTES:
 *  GA02 requirement fulfilled
 */
mutateEnableLink()
    SET done to FALSE
    FOR link in linkGenes AND done is FALSE
        IF link.enabled is FALSE
            link.enabled is TRUE
            SET done to TRUE
        END
    END

    RETURN done
END

/**
 * NOTES:
 *  1. Remove a random link
 *  2. Remove neuron if there is no more links connected to it
 *      a. Only remove a hidden neuron cannot be anything else
 *
 *  GA02 requirement fulfilled
 */
mutateRemoveLink()
    SET num to random(0, linkGenes.size())
    SET linkGenes[num].enabled to FALSE
END

/**
 * NOTES:
 *  1. Select random link
 *  2. Link replaced by a neuron and two links
 *  3. Link closer to the input neuron has the original weight
 *  4. Other link's weight is set to one
 *  5. Also create new innovations for the neuron and links if they don't exist
 *
 *  GA02 requirement fulfilled
 */
mutateAddNeuron()
    INSERT newNode(HIDDEN) to nodeGenes

    SET num to random(0, linkGenes.size() - 1 - SQRT(linkGenes.size()))
    SET linkGenes[num].enabled to FALSE

    SET link1 to LinkGene(linkGenes[num].input, newNode.id)
    SET link2 to LinkGene(newNode.id, linkGenes[num].output)

    geneHistory.addNewGene(nodeGenes.size(), newNode.type)

    SET linkID to geneHistory.addNewLink(link1)
    SET link1.id to linkID
    INSERT link1 to linkGenes

    SET linkID to geneHistory.addNewLink(link2)
    SET link2.id to linkID
    INSERT link2 to linkGenes
END

/**
 * NOTES:
 *  1. Random link chosen
 *  2. Multiple weight with another number that is lower then 1
 *
 *  GA02 requirement fulfilled
 */
mutateWeight()
    SET num to random(0, linkGenes.size())
    SET linkGenes[num].weight *= .5  // What number should this be?
END

-------------------------------------------------------------------------------
-------------------------------- Class Network --------------------------------
-------------------------------------------------------------------------------

/**
 * NOTES:
 *  Make sure that the genome makes the output nodes first for line 29
 */
feedforward( inputs )
    SET index equal 0
    FOR node in sensors
        node.setOutput(input[index])
    END

    FOR node in hiddenNodes
        node.update()
    END

    SET outputs to VECTOR
    FOR node in outputNodes
        node.update()
        INSERT node.getOutput() into outputNodes
    END

    RETURN outputs
END

/**
 * NOTES:
 *  Make sure to append to the file.
 *
 *  NN02 requirement fulfilled
 */
writeNetworkToFile( gen )
    OPEN file to "gen" + gen + "/network" + gen

    IF failed to open file
        PUT error
    ELSE
        PUT "Genome Network: " + gen + "\n"
        FOR node in hiddenNodes
            FOR input in node.inputs
                PUT node.getID(), input.getID(), input.weight
            END
        END

        FOR node in outputNodes
            FOR input in node.inputs
                PUT node.getID(), input.getID(), input.weight
            END
        END
    END
END

getNode( id )
    SET node to NULL

    FOR n in sensors
        IF n.id equals id
            SET node to n
        END
    END
    FOR n in outputNodes
        IF n.id equals id
            SET node to n
        END
    END
    FOR n in hiddenNodes
        IF n.id equals id
            SET node to n
        END
    END

    RETURN node
END

/**
 * NOTES:
 *  Paths variable must be by reference for this to work.
 */
findPaths( id, ids, count, paths )
    SET node to getNode(id)
    INSERT id in ids

    FOR input in node.getInputs()
        IF input.id is not in ids     # This makes sure no infinite loop is made
            SET temp to findPaths(input.id, ids, count + 1, paths)
        END
        IF input.type is SENSOR
            INSERT temp in paths
        END
    END

    RETURN count
END

getShortestPath( id )
    SET paths to VECTOR
    SET ids to VECTOR

    findPaths(id, ids, 0, paths)

    SET shortest to MAX_INT
    FOR path in paths
        IF path < shortest
            SET shortest to path
        END
    END

    RETURN shortest
END

update( nodeGenes, linkGenes )
    deleteNetwork()

    FOR nodeGene in nodeGenes with id AS KEY
        SET node(id, nodeGene.type)

        IF nodeGene is SENSOR
            INSERT node to sensors
        ELSE IF nodeGene is Hidden
            INSERT node to hiddenNodes
        ELSE
            INSERT node to outputNodes
        END
    END

    FOR linkGene in linkGenes
        IF linkGene is enabled
            SET fromNode to getNode(linkGene.in) # Grab the node that the link is pointing from.
            SET toNode to getNode(linkGene.out)  # Grab the node that the link is pointing to.

            toNode.addInput(fromNode, weight)
        END
    END
END

deleteNetwork()
    FOR node in hiddenNodes
        DELETE node
    END
    FOR node in outputNodes
        DELETE node
    END
    FOR node in sensors
        DELETE node
    END

    CLEAR sensors
    CLEAR hiddenNodes
    CLEAR outputNodes
END

-------------------------------------------------------------------------------
---------------------------------- Class Node ---------------------------------
-------------------------------------------------------------------------------

addInput( node, weight )
    SET link to node and weight

    INSERT link in inputs
END

deleteLinks()
    CLEAR inputs
END

update()
    SET sum to 0
    FOR input in inputs
        IF input.getOutput() IS NOT NULL
            SET sum += input.weight * input.getOutput()
        END
    END

    SET output to 1 / (1 + e ^ (-sum))
END